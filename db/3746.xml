<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="3746" name="2014-08-27-device-tree-overlay-support-lands-upstream" prototype="Page" created="1409168682839" lastModified="1452812496460">
  <hop:parent idref="2912" prototyperef="Page"/>
    <http_browser>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36</http_browser>
    <lang>en-us</lang>
    <uri>2014-08-27-device-tree-overlay-support-lands-upstream</uri>
    <http_host>127.0.0.1:8080</http_host>
    <time type="date">27.08.2014 19:46:24 UTC</time>
    <pseudoparent idref="2912" prototyperef="Page"/>
    <http_remotehost>127.0.0.1</http_remotehost>
    <hopsession>127.0.0.x6exoezk90au</hopsession>
    <user>jkridner.wordpress.com</user>
    <pvcount type="float">9324.0</pvcount>
    <body>&lt;h1&gt;Device Tree Overlay Support Lands Upstream&lt;/h1&gt;
&lt;p&gt;&lt;a class=&quot;external&quot; target=&quot;_blank&quot; href=&quot;https://github.com/pantoniou&quot;&gt;Pantelis Antoniou&lt;/a&gt; originated device tree overlay support for the purpose of enabling dynamic hardware configuration under Linux on devices like BeagleBone that use device tree for hardware configuration. Device tree was introduced to Linux for the purpose of putting the description of hardware into data structures, rather than building it up programmatically, greatly reducing the amount of code required to be maintained within the Linux kernel sources. &lt;a href=&quot;http://beagleboard.org/blog/2014-02-18-project-spotlight-logi-bone/&quot;&gt;&lt;img style=&quot;float:right;width:50%;padding:5px;&quot; src=&quot;http://i.imgur.com/cMm5cTU.jpg&quot; /&gt;&lt;/a&gt; Until now, the device tree data structure was only processed at boot time and that simply can&apos;t work for devices that might change hardware configurations after boot. While many BeagleBone capes can be probed by the bootloader, a common use-case is hardware that is reconfigurable. The most obvious example  is a cape with an &lt;a class=&quot;external&quot; target=&quot;_blank&quot; href=&quot;http://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; on it. &lt;/p&gt;
&lt;p&gt;Pantelis&apos; early code was used in the &lt;a class=&quot;external&quot; target=&quot;_blank&quot; href=&quot;http://elinux.org/BeagleBone_and_the_3.8_Kernel&quot;&gt;kernel provided with the launch of BeagleBone Black&lt;/a&gt;. This became the standard for how BeagleBone cape hardware is supported with numerous &lt;a href=&quot;https://learn.adafruit.com/introduction-to-the-beaglebone-black-device-tree/overview&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;tutorials&lt;/a&gt; showing up and probing of the on-board cape EEPROMs by &lt;a href=&quot;http://elinux.org/Capemgr&quot;&gt;Capemgr&lt;/a&gt;. This was all done specifically for BeagleBone kernels and was not part of mainline Linux until today when &lt;a class=&quot;external&quot; target=&quot;_blank&quot; href=&quot;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=201c910bd6898d81d4ac6685d0f421b7e10f3c5d&quot;&gt;Linus&apos; accepted Pantelis&apos; patch for device tree transactional support&lt;/a&gt; which introduces &lt;a href=&quot;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/devicetree/changesets.txt&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;changesets to device tree support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you Pantelis for your persistence!&lt;/p&gt;
&lt;p&gt;This means that we should soon have Capemgr support in newer kernels and we are trying to get a jump on that now. However, we&apos;ve also learned a few things over the last year about what the typical cape maker might feel comfortable understanding and debugging. &lt;a href=&quot;https://github.com/RobertCNelson&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;Robert Nelson&lt;/a&gt; has been releasing &lt;a href=&quot;https://github.com/beagleboard/linux/tree/3.14&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;kernel images based on 3.14 stable trees and TI patch sets&lt;/a&gt; along with &lt;a href=&quot;http://elinux.org/Beagleboard:BeagleBoneBlack_Debian&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;test Debian images&lt;/a&gt;. This was &lt;a href=&quot;http://beagleboard.org/Community/Forums?place=msg%2Fbeagleboard%2F4eDQvQOkUkc%2FRjWyIrXcYgwJ&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;announced on the mailing list&lt;/a&gt; recently along with instructions on downloading newer images, updating to newer kernels and reporting issues. In this new kernel effort, we are starting with trying to enable every cape and I/O function we can manage &lt;b&gt;without overlays&lt;/b&gt; first, then will make use of overlays for any features. The initial direction was to create a &lt;a href=&quot;http://beagleboard.org/Community/Forums?place=msg%2Fbeagleboard%2FULhioCVzbYk%2FZ1yeu1YBThAJ&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;separate git tree&lt;/a&gt; for this effort, but that idea was dropped and the latest Beagle kernels can all be found at &lt;a href=&quot;http://github.com/beagleboard/linux&quot; class=&quot;external&quot; target=&quot;_blank&quot;&gt;github.com/beagleboard/linux&lt;/a&gt; with live Debian-packaged builds at &lt;a href=&quot;http://builds.beagleboard.org&quot; target=&quot;_blank&quot; class=&quot;external&quot;&gt;builds.beagleboard.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your help testing and patching this kernel, along with your appreciation of those continuing to advance the state of the mainline Linux kernel, is greatly appreciated. Thanks all!&lt;/p&gt;

</body>
    <http_language>en-US,en;q=0.8</http_language>
    <render_skin>blog</render_skin>
    <is_xhtml type="boolean">true</is_xhtml>
    <http_referer>http://beagleboard.org/blog/2014-08-27-device-tree-overlay-support-lands-upstream/edit</http_referer>
  </hopobject>
</xmlroot>
