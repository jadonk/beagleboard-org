<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="helma.xsl"?>
<xmlroot xmlns:hop="http://www.helma.org/docs/guide/features/database">
  <hopobject id="3008" name="accelerometer" prototype="Page" created="1375888514900" lastModified="1421847398543">
  <hop:parent idref="2892" prototyperef="Page"/>
    <http_browser>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36</http_browser>
    <lang>en-us</lang>
    <uri>accelerometer</uri>
    <http_host>beagleboard.org</http_host>
    <time type="date">15.08.2013 09:47:30 UTC</time>
    <pseudoparent idref="2892" prototyperef="Page"/>
    <http_remotehost>192.91.75.30</http_remotehost>
    <hopsession>192.91.75.172.24.1.1mdcrwb0yynys</hopsession>
    <user>jkridner@gmail.com</user>
    <pvcount type="float">67.0</pvcount>
    <body>&lt;h1&gt;&lt;a href=&quot;http://processingjs.org/&quot; class=&quot;external&quot;&gt;Processing.JS&lt;/a&gt;&lt;/h1&gt;
&lt;canvas id=&quot;mysketch&quot;&gt;&lt;/canvas&gt;
&lt;script src=&quot;/static/bonescript.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/static/processing.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
(function(){
var canvas = document.getElementById(&apos;mysketch&apos;);
var pjs = new Processing(canvas);

// Global variables
var radius = 50.0;
var X, Y;
var nX, nY, nZ;
var delay = 16;
var brightness = 0;
var buttonStatus = 0;
var sliderStatus = 0;
var lastSliderValue = 0;
var LED_RED = &apos;P9_42&apos;;
var LED_GREEN = &apos;P9_14&apos;;
var LED_BLUE = &apos;P9_16&apos;;
var BUTTON = &apos;P8_19&apos;;
var POT = &apos;P9_36&apos;;
var S_DATA = &apos;P9_18&apos;;
var S_CLOCK = &apos;P9_22&apos;;
var S_LATCH = &apos;P9_17&apos;;
var S_CLEAR = &apos;P9_15&apos;;

var segDigits = [ 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90 ];

// Get the BoneScript library and begin updating the canvas
setTargetAddress(&apos;192.168.7.2&apos;, {initialized: run});
function run() {
    var b = require(&apos;bonescript&apos;);
    var port = &apos;/dev/i2c-2&apos;
    var address = 0x1c;
    b.pinMode(LED_RED, b.OUTPUT);
    b.pinMode(LED_GREEN, b.OUTPUT);
    b.pinMode(LED_BLUE, b.OUTPUT);
    b.pinMode(BUTTON, b.INPUT);
    b.pinMode(S_DATA, b.OUTPUT);
    b.pinMode(S_CLOCK, b.OUTPUT);
    b.pinMode(S_LATCH, b.OUTPUT);
    b.pinMode(S_CLEAR, b.OUTPUT);
    b.digitalWrite(S_DATA, b.LOW);
    b.digitalWrite(S_CLOCK, b.LOW);
    b.digitalWrite(S_LATCH, b.LOW);
    b.digitalWrite(S_CLEAR, b.HIGH);
    b.i2cOpen(port, address, {}, onI2C);
    
    function onI2C() {
        b.i2cWriteBytes(port, 0x2a, [0x00], nextA);
    }

    function nextA() {
        b.i2cWriteBytes(port, 0x0e, [0x07], nextB);
    }
    
    function nextB() {
        b.i2cWriteBytes(port, 0x2a, [0x01], pjs.setup);
    }

    // Setup the Processing Canvas
    pjs.setup = function() {
        pjs.size(255, 255);
        pjs.strokeWeight(10);
        pjs.frameRate(15);
        X = pjs.width / 2;
        Y = pjs.height / 2;
        nX = X;
        nY = Y;  
    }
    
    // Main draw loop
    pjs.draw = function() {
        // Calculate some fading values based on the frame count
        radius = 50.0 + (15-sliderStatus)*pjs.sin(pjs.frameCount / 4);
        brightness = (radius - 40.0) / 20.0;
        
        // Set the RGB LED color based on the status of the button
        if(buttonStatus) {
            b.analogWrite(LED_RED, brightness);
            b.analogWrite(LED_BLUE, 0);
        } else {
            b.analogWrite(LED_RED, 0);            
            b.analogWrite(LED_BLUE, brightness);
        }
      
        // Track circle to new destination
        X+=(nX-X)/delay;
        Y+=(nY-Y)/delay;
      
        // Fill canvas grey
        pjs.background(100);
      
        // Set fill-color to blue or red, based on button status
        if(buttonStatus) pjs.fill(200, 30, 20)
        else pjs.fill(0, 121, 184);
      
        // Set stroke-color white
        pjs.stroke(255); 
      
        // Draw circle
        pjs.ellipse(X, Y, radius, radius);
        
        // Fetch slider location for next time
        b.analogRead(POT, onAnalogRead);
        
        // Fetch accelerometer status
        b.i2cReadBytes(port, 1, 6, onReadBytes);
        
        // Fetch button status
        b.digitalRead(BUTTON, onDigitalRead);
    }
    
    // Handle data back from potentiometer
    function onAnalogRead(x) {
        if(!x.err &amp;&amp; (x.value &gt;= 0) &amp;&amp; (x.value &lt;= 1)) {
            if(Math.abs(x.value - lastSliderValue) &gt; 0.05) {
                lastSliderValue = x.value;
                sliderStatus = parseInt(x.value*10, 10);
                $(&apos;#sliderStatus&apos;).html(sliderStatus);
                write7Seg(sliderStatus);            
            }
        }
    }
    
    function write7Seg(x) {
        var c = segDigits[x%10];
        b.shiftOut(S_DATA, S_CLOCK, b.MSBFIRST, c, onShiftOut);
    }
    
    function onShiftOut(x) {
        b.digitalWrite(S_LATCH, b.HIGH, onLatchHigh);
    }
    
    function onLatchHigh(x) {
        b.digitalWrite(S_LATCH, b.LOW);
    }
    
    function onWriteByte(x) {
        if(x.event == &apos;callback&apos;) {
            b.i2cReadBytes(port, 1, 6, onReadBytes);
        }
    }
    
    function onReadBytes(x) {
        if(x.event == &apos;callback&apos;) {
            nX = x.res[0];
            nY = x.res[2];
            nZ = x.res[4];
            if(nX &gt;= 128) nX = -((nX^0xFF)+1);
            if(nY &gt;= 128) nY = -((nY^0xFF)+1);
            if(nZ &gt;= 128) nZ = -((nZ^0xFF)+1);
            nX += 128;
            nX = 255 - nX;
            nY += 128;
            nZ += 128;
            $(&apos;#nX&apos;).html(nX);
            $(&apos;#nY&apos;).html(nY);
            $(&apos;#nZ&apos;).html(nZ);
        }
    }
    
    // Handle data back from button
    function onDigitalRead(x) {
        buttonStatus = (x.value == b.LOW) ? 1 : 0;
        $(&apos;#buttonStatus&apos;).html(buttonStatus);
    }
    
    //pjs.setup();
}

})();
&lt;/script&gt;
&lt;p&gt;buttonStatus = &lt;span id=&quot;buttonStatus&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;sliderStatus = &lt;span id=&quot;sliderStatus&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;nX = &lt;span id=&quot;nX&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;nY = &lt;span id=&quot;nY&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;nZ = &lt;span id=&quot;nZ&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</body>
    <http_language>en-US,en;q=0.8</http_language>
    <is_xhtml type="boolean">true</is_xhtml>
    <http_referer>http://beagleboard.org/support/BoneScript/processingjs/accelerometer/edit</http_referer>
  </hopobject>
</xmlroot>
